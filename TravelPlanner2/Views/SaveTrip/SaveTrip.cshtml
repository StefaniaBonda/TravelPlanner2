@model TravelPlanner2.Controllers.SaveTripController.SaveTripViewModel
@{
    ViewBag.Title = "Save Trip Details";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        #tripMap {
            height: 500px;
            width: 100%;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        .number-icon {
            background: #2A81CB;
            color: white;
            border-radius: 50%;
            text-align: center;
            font-weight: bold;
            line-height: 30px;
            width: 30px;
            height: 30px;
            box-shadow: 0 0 2px #333;
        }
    </style>
}

<div class="container my-5">
    <h2 class="mb-4">Save Trip Details</h2>
    <div class="row g-4">
        <div class="col-md-6">
            @using (Html.BeginForm("SaveTrip", "SaveTrip", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.TripId)

                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="mb-3">
                            @Html.LabelFor(model => model.Name, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Description, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 3 })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-check mb-3">
                            @Html.CheckBoxFor(model => model.IsFavorite, new { @class = "form-check-input" })
                            @Html.LabelFor(model => model.IsFavorite, new { @class = "form-check-label" })
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-6">
            <div id="tripMap"></div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.polylineDecorator/1.7.0/leaflet.polylineDecorator.min.js"></script>

    <script>
    document.addEventListener("DOMContentLoaded", function () {
        const map = L.map('tripMap').setView([45.9432, 24.9668], 6);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        const tripId = @Html.Raw(Model.TripId);

        const endpoints = [
            `/SaveTrip/GetOrderedCulinaryLocations?tripId=${tripId}`,
            `/SaveTrip/GetOrderedBuildingLocations?tripId=${tripId}`,
            `/SaveTrip/GetOrderedNatureLocations?tripId=${tripId}`,
            `/SaveTrip/GetOrderedCulturalLocations?tripId=${tripId}`
        ];

        Promise.all(endpoints.map(url => fetch(url).then(res => res.json())))
            .then(allData => {
                const allLocations = allData.flat(); // Combinăm toate obiectivele într-o singură listă
                if (!allLocations.length) return;

                const latlngs = [];

                allLocations.forEach((loc, index) => {
                    const coords = [loc.Latitude, loc.Longitude];
                    latlngs.push(coords);

                    L.marker(coords, {
                        icon: L.divIcon({
                            className: 'custom-div-icon',
                            html: `<div class="number-icon">${index + 1}</div>`,
                            iconSize: [30, 42],
                            iconAnchor: [15, 42]
                        })
                    }).addTo(map)
                      .bindPopup(`<strong>${loc.Name}</strong><br>${loc.Description}`);
                });

                const polyline = L.polyline(latlngs, {
                    color: 'blue',
                    weight: 4,
                    opacity: 0.7
                }).addTo(map);

                L.polylineDecorator(polyline, {
                    patterns: [
                        {
                            offset: '5%',
                            repeat: '15%',
                            symbol: L.Symbol.arrowHead({
                                pixelSize: 10,
                                pathOptions: { color: 'darkblue', fillOpacity: 1, weight: 2 }
                            })
                        }
                    ]
                }).addTo(map);

                map.fitBounds(polyline.getBounds(), { padding: [50, 50] });

                if (latlngs.length) {
                    const bounds = L.latLngBounds(latlngs);
                    map.fitBounds(bounds, { padding: [50, 50] });
                }

            })


            .catch(err => console.error("Eroare la încărcarea locațiilor:", err));
    });
    </script>

}
