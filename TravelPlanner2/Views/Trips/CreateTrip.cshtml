@{
    ViewBag.Title = "Create Trip";
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
}

<div class="main-layout">
    <div class="form-map-wrapper">
        <div class="form-container">
            <h2>Create Trip</h2>
            <form id="trip-form" class="styled-form">
                <div class="form-group">
                    <label for="country">Country</label>
                    <input type="text" id="country" name="country" required />
                </div>
                <div class="form-group">
                    <label for="city">City</label>
                    <input type="text" id="city" name="city" required />
                </div>
                <div class="form-group">
                    <label for="address">Address</label>
                    <input type="text" id="address" name="address" />
                </div>
                <div class="form-group">
                    <label for="radius">Radius (in meters)</label>
                    <input type="number" id="radius" name="radius" min="100" value="1000" />
                </div>
                <div class="form-group">
                    <label>Interese:</label><br />
                    <label><input type="checkbox" name="interests" value="Buildings" /> Buildings</label><br />
                    <label><input type="checkbox" name="interests" value="Culinary" /> Culinary</label><br />
                    <label><input type="checkbox" name="interests" value="Nature" /> Nature</label><br />
                    <label><input type="checkbox" name="interests" value="Cultural" /> Cultural</label>
                </div>
                <div style="text-align: center;">
                    <button type="submit" class="btn btn-primary">Find locations</button>
                </div>
            </form>
            <div class="trip-actions">
                <a href="/Trips/ViewTrip" class="btn btn-primary">Finish and View your trip</a>
            </div>
        </div>
        <div id="map"></div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let map;
        let poiMarkers = [];

        document.addEventListener("DOMContentLoaded", function () {
            map = L.map('map').setView([45.9432, 24.9668], 6);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);
        });

        function mapToInterestType(tags) {
            if (tags.amenity === "restaurant" || tags.amenity === "cafe") return "Culinary";
            if (tags.tourism === "museum" || tags.historic === "monument") return "Cultural";
            if (tags.leisure === "park" || tags.natural) return "Nature";
            if (tags.amenity === "place_of_worship" || tags.building === "cathedral") return "Buildings";
            return "Unknown";
        }

        document.getElementById("trip-form").addEventListener("submit", function (e) {
            e.preventDefault();

            const city = document.querySelector("input[name='city']").value;
            const country = document.querySelector("input[name='country']").value;
            const address = document.querySelector("input[name='address']").value.trim();
            const radius = parseInt(document.querySelector("input[name='radius']").value.trim()) || 1000;
            const interests = Array.from(document.querySelectorAll("input[name='interests']:checked")).map(cb => cb.value);

            const query = address !== ""
                ? `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address + ", " + city + ", " + country)}`
                : `https://nominatim.openstreetmap.org/search?city=${city}&country=${country}&format=json`;

            fetch(query)
                .then(response => response.json())
                .then(data => {
                    if (data.length === 0) {
                        alert("Location not found.");
                        return;
                    }

                    const lat = data[0].lat;
                    const lon = data[0].lon;

                    map.flyTo([lat, lon], 13);

                    const overpassQuery = generateOverpassQuery(interests, lat, lon, radius);

                    fetch("https://overpass-api.de/api/interpreter", {
                        method: "POST",
                        body: overpassQuery
                    })
                        .then(response => response.json())
                        .then(poiData => {
                            poiMarkers.forEach(m => map.removeLayer(m));
                            poiMarkers = [];

                            poiData.elements.forEach(el => {
                                if (el.lat && el.lon) {
                                    const category = mapToInterestType(el.tags);
                                    if (category === "Unknown") return;

                                    const name = el.tags.name || 'Necunoscut';
                                    const popupContent = `<strong>${category}</strong>: ${name}<br />
                                            <button onclick="addToTrip('${category}', '${name.replace(/'/g, "\\'")}', ${el.lat}, ${el.lon})">Adaugă în trip</button>`;

                                    const marker = L.marker([el.lat, el.lon], {
                                        opacity: 0.0
                                    }).addTo(map);
                                    marker.bindPopup(popupContent);
                                    poiMarkers.push(marker);

                                    // Animatie fade-in
                                    let opacity = 0.0;
                                    const fadeInterval = setInterval(() => {
                                        opacity += 0.05;
                                        if (opacity >= 1) {
                                            opacity = 1;
                                            clearInterval(fadeInterval);
                                        }
                                        marker.setOpacity(opacity);
                                    }, 30);
                                }
                            });

                            if (poiData.elements.length === 0) {
                                alert("Nu s-au găsit locații pentru interesele selectate.");
                            }
                        });
                });
        });

        function generateOverpassQuery(interests, lat, lon, radius) {
            const filters = {
                "Buildings": `node(around:${radius},${lat},${lon})[amenity=place_of_worship];node(around:${radius},${lat},${lon})[building=cathedral];`,
                "Nature": `node(around:${radius},${lat},${lon})[leisure=park];`,
                "Cultural": `node(around:${radius},${lat},${lon})[tourism=museum];node(around:${radius},${lat},${lon})[historic=monument];`,
                "Culinary": `node(around:${radius},${lat},${lon})[amenity=restaurant];node(around:${radius},${lat},${lon})[amenity=cafe];`
            };

            const queryParts = interests.map(i => filters[i]).filter(Boolean);
            return `[out:json][timeout:25];(${queryParts.join('\n')});out body;`;
        }

        function addToTrip(type, name, lat, lon) {
            const city = document.querySelector("input[name='city']").value;
            const country = document.querySelector("input[name='country']").value;

            fetch('/Trips/GetTripId')
                .then(response => response.json())
                .then(tripId => {
                    if (!tripId) {
                        alert("No active trip found.");
                        return;
                    }

                    const data = {
                        Type: type,
                        Name: name || "Fără nume",
                        Latitude: lat,
                        Longitude: lon,
                        City: city,
                        Country: country,
                        Description: "Locație adăugată automat din hartă.",
                        Price: 0
                    };

                    fetch('/Trips/AddLocation', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    })
                        .then(resp => {
                            if (resp.ok) {
                                alert("Locația a fost adăugată în trip!");
                            } else {
                                alert("Eroare la adăugare.");
                            }
                        });
                })
                .catch(err => {
                    console.error("Error fetching TripId:", err);
                    alert("Eroare la obținerea TripId.");
                });
        }
    </script>

    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
        }

        .main-layout {
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .form-map-wrapper {
            display: flex;
            width: 95vw;
            height: 90vh;
            gap: 30px;
            justify-content: center;
            align-items: stretch;
        }

        .form-container {
            flex: 1;
            max-width: 400px;
            padding: 20px;
            background-color: var(--header-background-color);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
        }

        #map {
            flex: 2;
            height: 100%;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .trip-actions {
            margin-top: 20px;
            text-align: center;
        }

        .form-group input[type="checkbox"] {
            margin-right: 8px;
            transform: scale(1.2);
            accent-color: var(--secondary-color);
        }
    </style>
} @* End of Scripts *@
