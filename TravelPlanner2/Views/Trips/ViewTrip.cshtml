@{
    ViewBag.Title = "View Trip";
}
@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        #locationsList {
            list-style-type: none;
            padding: 0;
        }

            #locationsList li {
                cursor: move;
                padding: 10px;
                margin: 5px 0;
                border: 1px solid #ddd;
                background-color: #f9f9f9;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

                #locationsList li.dragging {
                    opacity: 0.5;
                }

        .reorder-controls {
            display: flex;
            align-items: center;
        }

            .reorder-controls span {
                cursor: move;
                color: #888;
            }

        #saveOrderBtn {
            margin-top: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
        }

        #routeLine {
            stroke: blue;
            stroke-width: 3;
            stroke-opacity: 0.6;
        }
    </style>
}

<h2>Your Trip Details</h2>
<div id="tripSummary">
    <p>Trip Locations: (Drag and drop to reorder)</p>
    <ul id="locationsList"></ul>
    <button id="saveOrderBtn" style="display:none;">Save Location Order</button>
</div>
<div id="tripMap" style="height: 500px; width: 100%;"></div>

<!-- ✅ Afișare distanță totală -->
<div id="tripDistance" style="margin-top: 10px; font-weight: bold; text-align: center;">
    Total distance: calculating...
</div>

<div class="trip-actions" style="margin-top: 20px; text-align: center;">
    <a href="/Trips/ContinueTrip" class="btn btn-primary">Add More Locations</a>
    <a href="/SaveTrip/SaveTrip" class="btn btn-primary">Save Trip Details</a>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const tripMap = L.map('tripMap').setView([45.9432, 24.9668], 6);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(tripMap);

            const locationsList = document.getElementById('locationsList');
            const saveOrderBtn = document.getElementById('saveOrderBtn');

            let locations = [];
            let markers = [];
            let routeLine = null;

            fetch('/Trips/GetTripLocations')
                .then(response => response.json())
                .then(fetchedLocations => {
                    locations = fetchedLocations;

                    if (locations.length === 0) {
                        locationsList.innerHTML = '<li>No locations added to this trip yet.</li>';
                        return;
                    }

                    locationsList.innerHTML = '';
                    const bounds = [];

                    locations.forEach((location, index) => {
                        if (!location.Latitude || !location.Longitude) return;

                        const marker = L.marker([location.Latitude, location.Longitude])
                            .addTo(tripMap)
                            .bindPopup(`
                                    <strong>${location.Type}</strong>: ${location.Name}<br>
                                    City: ${location.City}, Country: ${location.Country}<br>
                                    Description: ${location.Description || 'No description'}
                                `);

                        markers.push(marker);

                        const li = document.createElement('li');
                        li.setAttribute('draggable', 'true');
                        li.dataset.index = index;
                        li.innerHTML = `
                                <span>${index + 1}. ${location.Type}: ${location.Name} (${location.City}, ${location.Country})</span>
                                <div class="reorder-controls"><span>&#9776;</span></div>
                            `;
                        li.addEventListener('dragstart', handleDragStart);
                        li.addEventListener('dragover', handleDragOver);
                        li.addEventListener('drop', handleDrop);
                        li.addEventListener('dragenter', handleDragEnter);
                        li.addEventListener('dragleave', handleDragLeave);
                        li.addEventListener('dragend', handleDragEnd);

                        locationsList.appendChild(li);
                        bounds.push([location.Latitude, location.Longitude]);
                    });

                    drawRouteLine();
                    updateTotalDistance(); // ✅ Apelează calculul distanței

                    if (bounds.length > 0) {
                        tripMap.fitBounds(bounds, { padding: [50, 50] });
                    }

                    if (locations.length > 1) {
                        saveOrderBtn.style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Error fetching trip locations:', error);
                    locationsList.innerHTML = '<li style="color:red">Error loading locations.</li>';
                });

            // ✅ Calculează distanța în km între 2 puncte
            function calculateDistanceKm(lat1, lon1, lat2, lon2) {
                const R = 6371;
                const dLat = (lat2 - lat1) * Math.PI / 180;
                const dLon = (lon2 - lon1) * Math.PI / 180;
                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                return R * c;
            }

            // ✅ Total distanță
            function updateTotalDistance() {
                let total = 0;
                for (let i = 0; i < locations.length - 1; i++) {
                    const from = locations[i];
                    const to = locations[i + 1];
                    if (from.Latitude && from.Longitude && to.Latitude && to.Longitude) {
                        total += calculateDistanceKm(from.Latitude, from.Longitude, to.Latitude, to.Longitude);
                    }
                }
                const distanceDiv = document.getElementById('tripDistance');
                if (distanceDiv) {
                    distanceDiv.textContent = `Total distance: ${total.toFixed(2)} km`;
                }
            }

            function drawRouteLine() {
                if (routeLine) tripMap.removeLayer(routeLine);
                const routePoints = locations.map(loc => [loc.Latitude, loc.Longitude]);
                if (routePoints.length >= 2) {
                    routeLine = L.polyline(routePoints, {
                        color: 'blue',
                        weight: 3,
                        opacity: 0.6,
                        dashArray: '10, 10'
                    }).addTo(tripMap);
                }
            }

            let draggedItem = null;
            let draggedIdx = null;

            function handleDragStart(e) {
                draggedItem = this;
                draggedIdx = parseInt(this.dataset.index);
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', this.innerHTML);
                setTimeout(() => this.classList.add('dragging'), 0);
            }

            function handleDragOver(e) {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                return false;
            }

            function handleDragEnter(e) {
                this.classList.add('over');
            }

            function handleDragLeave(e) {
                this.classList.remove('over');
            }

            function handleDrop(e) {
                e.preventDefault();
                if (draggedItem !== this) {
                    const targetIdx = parseInt(this.dataset.index);
                    const [movedLocation] = locations.splice(draggedIdx, 1);
                    locations.splice(targetIdx, 0, movedLocation);
                    const [movedMarker] = markers.splice(draggedIdx, 1);
                    markers.splice(targetIdx, 0, movedMarker);
                    locationsList.innerHTML = '';
                    locations.forEach((location, index) => {
                        const li = document.createElement('li');
                        li.setAttribute('draggable', 'true');
                        li.dataset.index = index;
                        li.innerHTML = `
                                <span>${index + 1}. ${location.Type}: ${location.Name} (${location.City}, ${location.Country})</span>
                                <div class="reorder-controls"><span>&#9776;</span></div>
                            `;
                        li.addEventListener('dragstart', handleDragStart);
                        li.addEventListener('dragover', handleDragOver);
                        li.addEventListener('drop', handleDrop);
                        li.addEventListener('dragenter', handleDragEnter);
                        li.addEventListener('dragleave', handleDragLeave);
                        li.addEventListener('dragend', handleDragEnd);
                        locationsList.appendChild(li);
                    });
                    drawRouteLine();
                    updateTotalDistance(); // ✅ Actualizează distanța după reordonare
                }
                return false;
            }

            function handleDragEnd(e) {
                Array.from(locationsList.children).forEach(li => {
                    li.classList.remove('over', 'dragging');
                });
            }

            saveOrderBtn.addEventListener('click', function () {
                const orderData = locations.map(loc => ({
                    Type: loc.Type,
                    Name: loc.Name,
                    City: loc.City
                }));

                fetch('/Trips/SaveLocationOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Location order saved successfully!');
                            saveOrderBtn.style.display = 'none';
                        } else {
                            throw new Error('Error saving location order');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to save location order. Please try again.');
                    });
            });
        });
    </script>
}
